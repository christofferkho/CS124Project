/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.receiver;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import app.entity.OverdueFee;
import app.entity.Student;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 *
 * @author Francisco
 */
//@Component
public class ManageFeeUI extends javax.swing.JDialog {

    /**
     * Creates new form ManageFeeUI
     */
    public ManageFeeUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public ManageFeeUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listStudent = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listMessage = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listFee = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        labelNumber = new javax.swing.JLabel();
        buttonMessage = new javax.swing.JButton();
        buttonDrop = new javax.swing.JButton();
        buttonDropAll = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labelDate = new javax.swing.JLabel();
        labelAmount = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        refreshStudentList();
        listStudent.addListSelectionListener(new ListSelectionListener(){

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
				if(!e.getValueIsAdjusting()){
					int id = Integer.parseInt(listStudent.getSelectedValue().toString());
					for(Student student: students){
						if(student.getIdNo() == id){
							labelName.setText(student.getFirstName() + " " + student.getLastName());
							labelNumber.setText(student.getPhoneNumber());
							double total = refreshFeeList(id);
							labelTotal.setText("Php" + Double.toString(total));
							break;
							
						}
					}
				}
			}
        	
        });
        
        listFee.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
				if(!e.getValueIsAdjusting()){
					String feeString = listFee.getSelectedValue().toString();
					String idString = feeString.substring(0, 1);
					for(OverdueFee fee: fees){
						if(fee.getId() == Integer.parseInt(idString)){
							labelDate.setText(fee.getDateIssued());
							labelAmount.setText("Php" + Double.toString(fee.getAmountDue()));
							break;
						}
					}
				}
			}
        	
        });
        jScrollPane1.setViewportView(listStudent);

        jLabel1.setText("Students:");

        listMessage.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listMessage);

        jLabel2.setText("Messages Sent:");

        /*listFee.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        jScrollPane3.setViewportView(listFee);

        jLabel3.setText("Overdue Fees:");

        jLabel4.setText("Name:");

        jLabel6.setText("Phone:");

        labelName.setText("   ");

        labelNumber.setText("   ");

        buttonMessage.setText("Message Warning");
        buttonMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMessageActionPerformed(evt);
            }
        });

        buttonDrop.setText("Drop Fee");
        buttonDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDropActionPerformed(evt);
            }
        });

        buttonDropAll.setText("Drop All for This Student");
        buttonDropAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDropAllActionPerformed(evt);
            }
        });

        jLabel7.setText("Date Issued:");

        jLabel8.setText("Amount due:");

        jLabel9.setText("Total due:");

        labelDate.setText("   ");

        labelAmount.setText("   ");

        labelTotal.setText("   ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(buttonDropAll)
                    .addComponent(buttonMessage)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNumber)
                            .addComponent(labelName))
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonDrop)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDate)
                                    .addComponent(labelAmount)
                                    .addComponent(labelTotal)))
                            .addComponent(jLabel3)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(labelName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(labelNumber))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(labelDate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(labelAmount))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(labelTotal))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonDropAll)
                            .addComponent(buttonDrop))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(buttonMessage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDropAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDropAllActionPerformed
        // TODO add your handling code here:
    	HashMap map;
    	String idString = listStudent.getSelectedValue().toString();
    	//int id = Integer.parseInt(idString);
    	try {
			map = doCommand("/dropAllOverdueFees", idString, "", 1);
			String outputText = (String) map.get("message");
			refreshStudentList();
			listFee.setModel(null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }//GEN-LAST:event_buttonDropAllActionPerformed

    private void buttonMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMessageActionPerformed
        // TODO add your handling code here:
    	HashMap map;
    	String idString = listStudent.getSelectedValue().toString();
    	//int id = Integer.parseInt(idString);
    	try {
			map = doCommand("/messageStudent", idString, "", 1);
			String outputText = (String) map.get("message");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }//GEN-LAST:event_buttonMessageActionPerformed

    private void buttonDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDropActionPerformed
        // TODO add your handling code here:
    	HashMap map;
    	String feeString = listFee.getSelectedValue().toString();
    	String[] feeStringSplit = feeString.split(":");
    	String idString = feeStringSplit[0];
    	int id = Integer.parseInt(idString);
    	for(OverdueFee fee: fees){
    		if(fee.getId() == id){
    			refreshFeeList(fee.getStudent().getIdNo());
    			break;
    		}
    	}
    	try {
			map = doCommand("/dropOverdueFee", "", idString, 2);
			refreshStudentList();
			int studentId = Integer.parseInt(listStudent.getSelectedValue().toString());
			refreshFeeList(studentId);
			String outputText = (String) map.get("message");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }//GEN-LAST:event_buttonDropActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageFeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageFeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageFeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageFeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageFeeUI dialog = new ManageFeeUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDrop;
    private javax.swing.JButton buttonDropAll;
    private javax.swing.JButton buttonMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelNumber;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JList listFee;
    private javax.swing.JList listMessage;
    private javax.swing.JList listStudent;
    // End of variables declaration//GEN-END:variables
    
//----------NETBEANS CODEENDS HERE------------
    
    public void refreshStudentList(){
    	try {
			HashMap map = doCommand("/viewStudents", "", "", 3);
			
			ObjectMapper om = new ObjectMapper();
			String mapString = (String) map.get("message");
			students = om.readValue(mapString, new TypeReference<List<Student>>(){});
			DefaultListModel idNos = new DefaultListModel();
			for(Student student: students){
				idNos.addElement(student.getIdNo());
			}
			listStudent.setModel(idNos);
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public double refreshFeeList(int id){
    	double total = 0.0;
    	try{
			HashMap map = doCommand("/viewOverdueFees", Integer.toString(id), "", 1);
        	
			ObjectMapper om = new ObjectMapper();
			String mapString = (String) map.get("message");
			fees = om.readValue(mapString, new TypeReference<List<OverdueFee>>(){});
			DefaultListModel dues = new DefaultListModel();
			
			for(OverdueFee fee: fees){
				double amountDue = fee.getAmountDue();
				dues.addElement(Long.toString(fee.getId()) + ": Php" + Double.toString(amountDue));
				total += amountDue;
			}
			listFee.setModel(dues);
		} catch (Exception f) {
			// TODO Auto-generated catch block
			f.printStackTrace();
		}
    	return total;
    }
    List<Student> students;
    List<OverdueFee> fees;
    
    private static HashMap doCommand(String action, String idNo, String feePk, int state) throws Exception
	{
		String url1 = "http://localhost:8080/"+action;
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		switch (state){
		case 1 :
			//viewOverdueFees, dropAllOverdueFees, messageStudent
			map.put(URLHandler.IDNO, idNo);
			break;
		case 2 :
			//dropOverdueFee
			map.put(URLHandler.FEEPK, feePk);
			break;
		case 3 :
			//viewStudents
			break;
		}
		
		
		
		
		// CONVERT JAVA DATA TO JSON
		ObjectMapper mapper = new ObjectMapper();
		String json1 = mapper.writeValueAsString(map);
		
		
		// SEND TO SERVICE
		String reply = NetUtil.postJsonDataToUrl(url1, json1);
		
		try
		{
			// CONVERT REPLY JSON STRING TO A JAVA OBJECT 
			HashMap replyMap = (HashMap) mapper.readValue(reply, HashMap.class);
			return replyMap;	
		}
		catch(Exception e)
		{
			//System.out.println(reply);
			HashMap replyMap = new HashMap();
			replyMap.put("message", reply);
			return replyMap;	
			
		}
	}
    
    @PostConstruct
	public void tada()
	{
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });
	}
	
	@Override
	@Value("${app.name}")
	public void setTitle(String s)
	{
		super.setTitle(s);
	}
}
